/*
 * This file is part of the Nano-Shell Simulation Project.
 * 
 * Copyright (C) 2025 Alessandro Veltri
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#include <iostream>
#include <iomanip>
#include <fstream>
#include <armadillo>
#include "headers/math33.H"
#include "headers/nanoshell.H"
#include "headers/cup.H"
#include "headers/ns_ISS.H"

using namespace std;

/** Compila con: 
g++ -Wall -I/usr/include/ -L/usr/local/lib ../src/lycurguseV_ns.cxx -o ../bin/lyns -lgsl -lgslcblas -lm -larmadillo
**/


    
int main(){
  double  dome, ome, omemi, omema, eps3_0, eps1_0, rap3, E0;;
  int omi, omeN=10000;
  char mtl[16], mdl[16], hst[16], active[16], sol[16];
  complex<double> eps, eps1, eps2, eps3, alph;

  ifstream nano("../data/input/nanosphere_eV.dat");
  if (!nano) {
    cerr << "Error: Cannot open input file" << endl;
    return 1;
  }
  ofstream resu("../data/output/results.dat");
  if (!resu) {
    cerr << "Error: Cannot open output file" << endl;
    return 1;
  }
  ofstream comp("../data/output/compounds.dat");
  if (!comp) {
    cerr << "Error: Cannot open output file" << endl;
    return 1;
  }
  fstream solv, con1, con2, plb, ps01;
  nanosphere ns;

    
  nano>>ns.r1>>ns.Dome>>ns.ome_0>>ns.G>>omemi>>omema>>mtl>>mdl>>active>>sol>>E0>>ns.rap>>hst;
  
  ns.r1=ns.r1*1.e-9;
  ns.r2=ns.r1/ns.rap;

  ns.init();
  ns.set_metal(mtl,mdl,1);
  eps3_0=ns.set_host(sol);
  eps1_0=ns.set_host(hst);
  ns.set_active(active);
  
  rap3=ns.rap*ns.rap*ns.rap;

  dome  = (omema-omemi)/omeN;

  eps3=eps3_0;

    
    
  cout<<endl;
  cout<<"    L Y C U R G U S"<<endl<<endl;
  cout<<"    .............    * Polarizability of a "<<mtl<<" [x] shell"<<endl;
  cout<<"    ....xxxxx....    * incapsulating a"<<hst<<" [o] nanosphere "<<endl;
  cout<<"    ...xxoooxx...    * dissolved in "<<sol<<" [.]"<<endl;
  cout<<"    ..xxoooooxx..    * "<<mdl<<" model utilized for metal"<<endl;
  cout<<"    ..xxoooooxx..    * permittivity of "<<hst<<" eps = "<<eps1_0<<endl;
  cout<<"    ...xxoooxx...    * permittivity of "<<sol<<" eps = "<<eps3_0<<endl;
  cout<<"    ....xxxxx....    * G = "<<ns.G<<endl;
  cout<<"    .............    * "<<endl;

  cout<<endl;
  
  cout<<"r1/r2 = "<<ns.rap<<endl;
  
  resu<<"# * RESULTS * "<<endl;
  resu<<"#"<<endl;
  resu<<"# file generated by ** lycurguseV.cxx ** "<<endl;
  resu<<"#"<<endl;
  resu<<"# PARAMETERS: "<<endl;
  resu<<"# r1 = "<<ns.r1<<"\tr2 = "<<ns.r2<<endl;
  resu<<"# iepsh_min = "<<ns.G<<endl;
  resu<<"# "<<mdl<<" model utilized for metal "<<endl;
  resu<<"# ------------- "<<endl;
  resu<<"# ome     real(alph)\timag(alph)\treal(alph_mie)\timag(alph_mie)"<<endl;
  resu<<"#"<<endl;

  comp<<"# * COMPONENTS * "<<endl;
  comp<<"#"<<endl;
  comp<<"# file generated by ** resoeV.cxx ** "<<endl;
  comp<<"#"<<endl;
  comp<<"# PARAMETERS: "<<endl;
  comp<<"# r1 = "<<ns.r1<<"\tr2 = "<<ns.r2<<"\tr1/r2 = "<<ns.rap<<endl;
  comp<<"# A = "<<ns.A<<"\tf = "<<ns.f<<endl;
  comp<<"# "<<mdl<<" model utilized for metal "<<endl;
  comp<<"# ------------- "<<endl;
  comp<<"# ome     real(eps1)\timag(eps1)\treal(eps2)\timag(eps2)\treal(eps3)\timag(eps3)"<<endl;
  comp<<"#"<<endl;

 
  
  eps3=eps3_0;
  for (omi=0; omi<=omeN; omi++){
    ome = omemi + omi*dome;
    eps1 = ns.active(ome,eps1_0);
    eps2 = ns.metal(ome);

    alph =((eps2-eps3)*(eps1+2.*eps2)+rap3*(eps1-eps2)*(eps3+2.*eps2))/
	  ((eps2+2.*eps3)*(eps1+2.*eps2)+rap3*(2.*eps2-2.*eps3)*(eps1-eps2)); //pag. 149 Borhen Hoffman


    resu<<"  "<<setw(8)<<setiosflags (ios::left)<<ome<<			// 1 omega
	  "\t"<<setw(11)<<setiosflags (ios::left)<<real(alph)<<		// 2 Re(alpha)
	  "\t"<<setw(11)<<setiosflags (ios::left)<<imag(alph)<<		// 3 Im(alpha)
	  endl;

    comp<<"  "<<setw(8)<<setiosflags (ios::left)<<ome<<			// 1 omega
	  "\t"<<setw(11)<<setiosflags (ios::left)<<real(eps1)<<		// 2 Re(eps1)
	  "\t"<<setw(11)<<setiosflags (ios::left)<<imag(eps1)<<		// 3 Im(eps1)
	  "\t"<<setw(11)<<setiosflags (ios::left)<<real(eps2)<<		// 4 Re(eps2)
	  "\t"<<setw(11)<<setiosflags (ios::left)<<imag(eps2)<<		// 5 Im(eps2)
	  "\t"<<setw(11)<<setiosflags (ios::left)<<real(eps3)<<
	  "\t"<<setw(11)<<setiosflags (ios::left)<<imag(eps3)<<
	  endl;
    }
  return 0;
  }
